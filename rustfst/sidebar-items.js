initSidebarItems({"constant":[["EPS_LABEL","Epsilon label representing the epsilon transition (empty transition) = `0`."],["EPS_SYMBOL","Epsilon symbol representing the epsilon transition (empty transition) = `<eps>`."]],"macro":[["fst","Creates a linear Fst containing the arguments."],["fst_path","Creates a Path containing the arguments."],["symt","Creates a `SymbolTable` containing the arguments. `# #[macro_use] extern crate rustfst; fn main() { # use rustfst::{SymbolTable, EPS_SYMBOL}; let symt = symt![\"a\", \"b\"]; assert_eq!(symt.len(), 3); assert_eq!(symt.get_symbol(0).unwrap(), EPS_SYMBOL); assert_eq!(symt.get_symbol(1).unwrap(), \"a\"); assert_eq!(symt.get_symbol(2).unwrap(), \"b\"); # }`"]],"mod":[["algorithms","Provides algorithms that are generic to all wFST."],["fst_impls","Implementation of the wFST traits with different data structures."],["fst_properties","Provides the `FstProperties` struct and some utils functions around it. Useful to assert some properties on a Fst."],["fst_traits","Provides traits that must be implemented to be able to use generic algorithms."],["prelude",""],["semirings","Provides a trait that shall be implemented for all weights stored inside a wFST."],["utils","A few utilities to manipulate wFSTs."]],"struct":[["Arc","Structure representing a transition from a state to another state in a FST."],["DrawingConfig","Struct to configure how the FST should be drawn."],["FstPath","Structure representing a path in a FST (list of input labels, list of output labels and total weight)."],["SymbolTable","A symbol table stores a bidirectional mapping between arc labels and \"symbols\" (strings)."]],"type":[["Label","Type used for the input label and output label of an arc in a wFST -> usize"],["StateId","Type used to identify a state in a wFST -> usize"],["Symbol","Symbol to map in the Symbol Table -> String"]]});